/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'sakura' at '14/07/19 15:55' with Gradle 2.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html
 */

apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'cpd'
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.1'
    }
}

configurations {
    provided
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    // [1]
    glassfishEmbeddedTestRuntime { extendsFrom integrationTestRuntime }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "com.fasterxml.jackson.core:jackson-databind:2.4.1.2"

    providedCompile "javax.servlet:javax.servlet-api:3.1.0"
    providedCompile "javax.json:javax.json-api:1.0"
    providedCompile "javax.websocket:javax.websocket-api:1.0"
    providedCompile "javax.enterprise:cdi-api:1.2"
    providedCompile "javax.annotation:javax.annotation-api:1.2"

    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "com.h2database:h2:1.4.180"

    testCompile "org.jboss.arquillian.junit:arquillian-junit-container:1.1.5.Final"
    testCompile "org.jboss.arquillian:arquillian-bom:1.1.5.Final"
    testCompile "org.jboss.arquillian.extension:arquillian-drone-bom:1.3.1.Final"
    testCompile "org.jboss.arquillian.selenium:selenium-bom:2.42.0"
    testCompile "org.jboss.arquillian.graphene:graphene-webdriver:2.0.3.Final"

    testCompile "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-javaee:2.0.0-alpha-6"
    testRuntime "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-javaee:2.0.0-alpha-6"
    testCompile "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-bom:2.2.1"
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-gradle-depchain', version: "2.2.0-alpha-2"

    testRuntime "org.jboss.arquillian.container:arquillian-glassfish-embedded-3.1:1.0.0.CR4"
    testRuntime "org.glassfish.main.extras:glassfish-embedded-all:4.0"
//    glassfishEmbeddedTestRuntime "org.postgresql:postgresql:$libraryVersions.postgresql"
    runtime 'org.jumpmind.symmetric.jdbc:mariadb-java-client:1.1.1'
}


sourceSets {
    main {
        compileClasspath = configurations.compile + configurations.provided
    }
    integrationTest { // [2]
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath += main.output + configurations.provided
        runtimeClasspath += main.output + configurations.provided
    }
}

task glassfishEmbeddedTest(type: Test) {
    jacoco {
        enabled = true
        destinationFile = file('build/reports/jacoco/jacoco.exec')
    }
}

tasks.withType(Test).matching({ t-> t.name.endsWith('Test') } as Spec).each { t ->
    t.testClassesDir = project.sourceSets.integrationTest.output.classesDir
    t.classpath = project.configurations.getByName(t.name + 'Runtime') +
            project.sourceSets.main.output +
            project.sourceSets.integrationTest.output
}

findbugs {
    toolVersion = "3.0.0"
    ignoreFailures = true
}

pmd {
    ignoreFailures = true
}

cpd {

}

tasks.cpd {
    reports {
        text.enabled = false
        xml.enabled = true
    }
    source = files('src/main/java')
}

test {
    jacoco {
        enabled = true
        destinationFile = file('build/reports/jacoco/jacoco.exec')
    }
}

check.dependsOn += glassfishEmbeddedTest
